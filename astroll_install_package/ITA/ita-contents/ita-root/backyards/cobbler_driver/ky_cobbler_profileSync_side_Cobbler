#!/bin/bash
# chkconfig: 2345 99 01
######################################################################
##
##  【概要】
##      ky_cobbler_profileSync_side_cobbler.php
##      の起動スクリプト
##
######################################################################

#----------------------------------------------------#
# ルートディレクトリ取得
#----------------------------------------------------#
source /etc/sysconfig/ita_env
ROOT_DIR_PATH=$ITA_ROOT_DIR

#----------------------------------------------------#
# 定数
#----------------------------------------------------#

PROG='ky_cobbler_profileSync_side_cobbler'
LOCK="/var/lock/subsys/${PROG}"
PROCESS=${ROOT_DIR_PATH}'/backyards/common/ky_loopcall-php-procedure.sh'
PHP_PROCEDURE_PRO=${ROOT_DIR_PATH}'/backyards/cobbler_driver/ky_cobbler_profileSync_side_Cobbler.php'
LOG_DIR=${ROOT_DIR_PATH}'/logs/backyardlogs'
PHP_MODULE=${ROOT_DIR_PATH}'/confs/backyardconfs/path_PHP_MODULE.txt'
DATA_RELAY_STRAGE=${ROOT_DIR_PATH}'/confs/backyardconfs/cobbler_driver/path_DATA_RELAY_STRAGE_side_Cobbler'
ITA_ENV=${ROOT_DIR_PATH}'/confs/backyardconfs/ita_env'

#----------------------------------------------------#
# パラメータ設定
#----------------------------------------------------#
# 無限ループのインターバル(0以上を指定、180未満にすること)
INTERVAL=60

# ログ出力レベル
LOG_LEVEL=`cat ${ITA_ENV} | grep "^ITA_LOG_LEVEL" | cut -d "=" -f 2`

#----------------------------------------------------#
# FUNCTION定義
#----------------------------------------------------#
function start()
{
    # 変数初期化
    CHECK=0
    
    # ループ処理シェルスクリプトチェック
    if [ ! -x ${PROCESS} ]; then
        CHECK=1
        echo "Starting ${PROG}: ERROR (${PROCESS} NOT FOUND OR NO EXECUTE PERMISSION)"
    fi
    
    if [ ${CHECK} -eq 0 ]; then
    	# PHPモジュールディレクトリ保持ファイルチェック
        if [ ! -f ${PHP_MODULE} ]; then
            CHECK=2
            echo "Starting ${PROG}: ERROR (PHP_MODULE DEFINE FILE NOT FOUND)"
        # PHPモジュール存在・実行可能チェック
        elif [ ! -x `cat ${PHP_MODULE}` ]; then
            CHECK=3
            echo "Starting ${PROG}: ERROR (${PHP_MODULE} PHP_MODULE NOT FOUND OR NO EXECUTE PERMISSION)"
        fi
    fi
    
    # プロファイルリスト同期プロシージャPHPチェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ! -f ${PHP_PROCEDURE_PRO} ]; then
            CHECK=4
            echo "Starting ${PROG}: ERROR (${PHP_PROCEDURE_PRO} NOT FOUND)"
        fi
    fi
    
    # データリレーストレージディレクトリ保持ファイルチェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ! -f ${DATA_RELAY_STRAGE} ]; then
            CHECK=9
            echo "Starting ${PROG}: ERROR (${DATA_RELAY_STRAGE} NOT FOUND)"
        fi
    fi
    
    # データリレーストレージディレクトリチェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ! -d `cat ${DATA_RELAY_STRAGE}` ]; then
            CHECK=10
            echo "Starting ${PROG}: ERROR (DATA RELAY STRAGE DIRECTORY NOT FOUND OR NOT DIRECTORY)"
        fi
    fi
    
    # 設定インターバル適正型チェック
    if [ ${CHECK} -eq 0 ]; then
        expr ${INTERVAL} + 1 > /dev/null 2>&1
        if [ $? -ge 2 ]; then
            CHECK=5
            echo "Starting ${PROG}: ERROR (INTERVAL IS NOT NUMERIC)"
        fi
    fi
    
    # 設定インターバル適正値チェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ${INTERVAL} -lt 0 ]; then
            CHECK=6
            echo "Starting ${PROG}: ERROR (INTERVAL IS TOO SMALL)"
        fi
    fi
    
    # ログレベル設定チェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ${LOG_LEVEL} != 'NORMAL' -a ${LOG_LEVEL} != 'DEBUG' ]; then
            CHECK=7
            echo "Starting ${PROG}: ERROR (LOG_LEVEL STATEMENT ILLEGAL)"
        fi
    fi
    
    # ログ保存ディレクトリチェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ! -d ${LOG_DIR} ]; then
            CHECK=8
            echo "Starting ${PROG}: ERROR (LOG_DIR NOT FOUND OR NOT DIRECTORY)"
        fi
    fi
    
 
    
    if [ ${CHECK} -eq 0 ]
    then
        # ロックファイル作成
        /bin/touch ${LOCK}
        
        # プロセス実行
        nohup ${PROCESS} ${LOCK} `cat ${PHP_MODULE}` ${PHP_PROCEDURE_PRO} ${LOG_DIR} ${INTERVAL} ${LOG_LEVEL} > /dev/null 2>&1 &
        
        # 3秒間のインターバル
        sleep 3
        
        # プロセス確認
        if [ `ps -ef | grep ${PHP_PROCEDURE_PRO} | grep -v grep | wc -l` -eq 0 ]
        then
            # メッセージ出力
            echo "Starting ${PROG}: [ NG ]"
            
            # 異常終了
            return 1
        else
            # メッセージ出力
            echo "Starting ${PROG}: [ OK ]"
            
            # 正常終了
            return 0
        fi
    fi
}
stop()
{
    # フラグ
    flag=0
    
    # ロックファイル存在確認
    if [ -f ${LOCK} ]
    then
        # ロックファイル削除
        /bin/rm -f ${LOCK}
        
        # プロセス終了確認ループ(約180sec)
        for i in `seq 1 1 180`
        do
            # プロセス確認
            if [ `ps -ef | grep ${PHP_PROCEDURE_PRO} | grep -v grep | wc -l` -eq 0 ]
            then
                flag=1
                break
            fi
            
            # 1秒間のインターバル
            sleep 1
        done
    fi
    
    #フラグ判定しメッセージ出力＆リターン
    if [ ${flag} -eq 1 ]
    then
        echo "Stopping ${PROG}: [ OK ]"
        return 0
    else
        echo "Stopping ${PROG}: [ NG ]"
        return 1
    fi
}

#----------------------------------------------------#
# 実処理
#----------------------------------------------------#
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo $"Usage: $0 {start|stop|restart}"
        exit 1
esac
