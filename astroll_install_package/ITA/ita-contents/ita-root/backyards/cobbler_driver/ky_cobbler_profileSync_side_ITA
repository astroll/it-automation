#!/bin/bash
# chkconfig: 2345 99 01
######################################################################
##
##  【概要】
##      cobbler_driver_profileSync2.php
##      の起動スクリプト
##
######################################################################

#----------------------------------------------------#
# ルートディレクトリ取得
#----------------------------------------------------#
source /etc/sysconfig/ita_env
ROOT_DIR_PATH=$ITA_ROOT_DIR

#----------------------------------------------------#
# 定数
#----------------------------------------------------#
PROG='ky_cobbler_profileSync_side_ITA'
LOCK="/var/lock/subsys/${PROG}"
PROCESS=${ROOT_DIR_PATH}'/backyards/common/ky_loopcall-php-procedure.sh'
PHP_PROCEDURE_PRO=${ROOT_DIR_PATH}'/backyards/cobbler_driver/ky_cobbler_profileSync_side_ITA.php'
LOG_DIR=${ROOT_DIR_PATH}'/logs/backyardlogs'
PHP_MODULE=${ROOT_DIR_PATH}'/confs/backyardconfs/path_PHP_MODULE.txt'
DB_MODEL=${ROOT_DIR_PATH}'/confs/commonconfs/db_model_string.txt'
ORACLE_ENV_SH=${ROOT_DIR_PATH}'/confs/backyardconfs/path_ORACLE_ENV_SH.txt'
DB_CONNECT_STR=${ROOT_DIR_PATH}'/confs/commonconfs/db_connection_string.txt'
DB_USRNAME=${ROOT_DIR_PATH}'/confs/commonconfs/db_username.txt'
DB_PASWD=${ROOT_DIR_PATH}'/confs/commonconfs/db_password.txt'

COUNT_SQL="SELECT COUNT(COBBLER_STORAGE_PATH_LNX) FROM B_COBBLER_IF_INFO WHERE DISUSE_FLAG=0;"
GET_SQL="SELECT COBBLER_STORAGE_PATH_LNX FROM B_COBBLER_IF_INFO WHERE DISUSE_FLAG=0;"
ITA_ENV=${ROOT_DIR_PATH}'/confs/backyardconfs/ita_env'

#----------------------------------------------------#
# パラメータ設定
#----------------------------------------------------#
# 無限ループのインターバル(0以上を指定、180未満にすること)
INTERVAL=60

# ログ出力レベル
LOG_LEVEL=`cat ${ITA_ENV} | grep "^ITA_LOG_LEVEL" | cut -d "=" -f 2`

#DB接続用パラメータ
DBUNAME=""
DBPWD=""
DBCONN=""
DBINSNM=""
DBNAME=""
DBSVHOST=""

#データリレーストレージディレクトリ取得
DATA_CNT=""
STRAGE_DIR=""
#----------------------------------------------------#
# FUNCTION定義
#----------------------------------------------------#
function start()
{
    # 変数初期化
    CHECK=0
    
    # ループ処理シェルスクリプトチェック
    if [ ! -x ${PROCESS} ]; then
        CHECK=1
        echo "Starting ${PROG}: ERROR (${PROCESS} NOT FOUND OR NO EXECUTE PERMISSION)"
    fi
    
    if [ ${CHECK} -eq 0 ]; then
        # PHPモジュールディレクトリ保持ファイルチェック
        if [ ! -f ${PHP_MODULE} ]; then
            CHECK=2
            echo "Starting ${PROG}: ERROR (PHP_MODULE DEFINE FILE NOT FOUND)"
        # PHPモジュール存在・実行可能チェック
        elif [ ! -x `cat ${PHP_MODULE}` ]; then
            CHECK=3
            echo "Starting ${PROG}: ERROR (PHP_MODULE NOT FOUND OR NO EXECUTE PERMISSION)"
        fi
    fi
    
     # プロファイルリスト同期プロシージャPHPチェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ! -f ${PHP_PROCEDURE_PRO} ]; then
            CHECK=4
            echo "Starting ${PROG}: ERROR (${PHP_PROCEDURE_PRO} NOT FOUND)"
        fi
    fi
    
    # 設定インターバル適正型チェック
    if [ ${CHECK} -eq 0 ]; then
        expr ${INTERVAL} + 1 > /dev/null 2>&1
        if [ $? -ge 2 ]
        then
            CHECK=5
            echo "Starting ${PROG}: ERROR (INTERVAL IS NOT NUMERIC)"
        fi
    fi
    
    # 設定インターバル適正値チェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ${INTERVAL} -lt 0 ]; then
            CHECK=6
            echo "Starting ${PROG}: ERROR (INTERVAL IS TOO SMALL)"
        fi
    fi
    
    # ログレベル設定チェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ${LOG_LEVEL} != 'NORMAL' -a ${LOG_LEVEL} != 'DEBUG' ]; then
            CHECK=7
            echo "Starting ${PROG}: ERROR (LOG_LEVEL STATEMENT ILLEGAL)"
        fi
    fi
    
    # ログ保存ディレクトリチェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ! -d ${LOG_DIR} ]; then
            CHECK=8
            echo "Starting ${PROG}: ERROR (LOG_DIR NOT FOUND OR NOT DIRECTORY)"
        fi
    fi
    
    # DB設定環境情報ファイルチェック
    if [ ${CHECK} -eq 0 ]; then
        if [ ! -f ${DB_MODEL} ]; then
            CHECK=9
            echo "Starting ${PROG}: ERROR (DB MODEL DEFINE FILE NOT FOUND)"
        elif [ `cat ${DB_MODEL}` -eq "0" ]; then
            if [ ! -f ${ORACLE_ENV_SH} ]; then
                CHECK=10
                echo "Starting ${PROG}: ERROR (ORACLE_ENV_SH DEFINE FILE NOT FOUND)"
            elif [ ! -x `cat ${ORACLE_ENV_SH}` ]; then
                CHECK=11
                echo "Starting ${PROG}: ERROR (ORACLE_ENV_SH NOT FOUND OR NO EXECUTE PERMISSION)"
            else
                # execute oracle_env.sh
                . `cat ${ORACLE_ENV_SH}`
                CHECK=0
            fi
        elif [ `cat ${DB_MODEL}` -eq "1" ]; then
            CHECK=0
        else
            CHECK=12
            echo "Starting ${PROG}: ERROR (DB MODEL DEFINITION INCORRECT)"
        fi
    fi
    
	# DataBase ユーザ名 ファイルチェック
	if [ ${CHECK} -eq 0 ]; then
		if [ -e ${DB_USRNAME} ]; then
		  # DataBase ユーザ名 取得
		  W_UNAMEenc=`cat ${DB_USRNAME}`
		  W_WK=`echo ${W_UNAMEenc} | tr '[A-Za-z]' '[N-ZA-Mn-za-m]'`
		  DBUNAME=`echo ${W_WK} | base64 -d`
		else
		  CHECK=13
	      echo "Starting ${PROG}: ERROR (NO FILE OF DATABASE USER NAME.)"
		fi
	fi

    # DataBaseパスワードファイルチェック
    if [ ${CHECK} -eq 0 ]; then
	    if [ -e ${DB_PASWD} ]; then
	      # DataBase パスワード 取得
	      W_PASWDenc=`cat ${DB_PASWD}`
	      W_WK=`echo ${W_PASWDenc} | tr '[A-Za-z]' '[N-ZA-Mn-za-m]'`
	      DBPWD=`echo ${W_WK} | base64 -d`
	    else
	      CHECK=14
	      echo "Starting ${PROG}: ERROR (NO FILE OF DATABASE PASSWORD.)"
	    fi
    fi

    # DataBase接続文字列ファイルチェック
    if [ ${CHECK} -eq 0 ]; then
	    if [ -e ${DB_CONNECT_STR} ]; then
	      # db_model_string.txtから Oracle/MySQL 種別を取得
	    
	      # DataBase 接続文字列 取得
	      W_CONNenc=`cat ${DB_CONNECT_STR}`
	      W_WK=`echo ${W_CONNenc} | tr '[A-Za-z]' '[N-ZA-Mn-za-m]'`
	      DBCONN=`echo ${W_WK} | base64 -d`
	      
	      if [ `cat ${DB_MODEL}` -eq "0" ]; then
	        # ORACLE用の接続文字列を分解、インスタンス名を取得
	        DBINSNM=`echo ${DBCONN} | cut -d "/" -f2`
	      else
	        # MySQL用の接続文字列を分解、データベース名を取得
	        DBNAME=`echo ${DBCONN} | cut -d ";" -f1 | cut -d "=" -f2`
	      fi
	      # host名を取得
	      DBSVHOST=`echo ${DBCONN} | cut -d "=" -f3`
	    else
	      CHECK=15
	      echo "Starting ${PROG}: ERROR (NO FILE OF DATABASE CONNECTION STRING.)"
	    fi
    fi
    
    #DBのデータリレーストレージのレコードが1件のみであるか確認
    if [ ${CHECK} -eq 0 ]; then
	    #oracle パスワードの有効期限が近付いているとき、ERRORメッセージが返されて正常に取れない可能性あり。
	    if [ `cat ${DB_MODEL}` -eq "0" ]; then
	    	DATA_CNT=`sqlplus -s ${DBUNAME}/${DBPWD} <<EOF
	    	SET HEAD OFF;
	    	${COUNT_SQL}
		    EXIT
EOF`
	    #MYSQL
	    else
                    #Redmine#1202
		    DATA_CNT=`mysql --show-warnings -h ${DBSVHOST} -u ${DBUNAME} -p${DBPWD} ${DBNAME} -N <<EOF
		    ${COUNT_SQL}
EOF`
		fi

		if [ $? -ne 0 ]; then
			CHECK=16
		elif [ ${DATA_CNT} -ne 1 ]; then
			CHECK=16
	    	echo "Starting ${PROG}: ERROR (DATABASE HAS NOT ONLY ONE RECORD OF DATA RELAY STRAGE_PATH.)"
		fi
	fi
	
    #データリレーストレージのアドレスをDBより取得
    if [ ${CHECK} -eq 0 ]; then
	    #oracle
	    if [ `cat ${DB_MODEL}` -eq "0" ]; then
	    	STRAGE_DIR=`sqlplus -s ${DBUNAME}/${DBPWD} <<EOF
	    	SET HEAD OFF;
	    	${GET_SQL}
		    EXIT
EOF`
	    #MYSQL
	    else
                    #Redmine#1202
		    STRAGE_DIR=`mysql --show-warnings -h ${DBSVHOST} -u ${DBUNAME} -p${DBPWD} ${DBNAME} -N <<EOF
		    ${GET_SQL}
EOF`
		fi

	    #取得したデータリレーストレージが存在するか、ディレクトリかを判定
	    if [ $? -ne 0 ]; then
			CHECK=16
	    elif [ ! -d ${STRAGE_DIR} ]; then
			CHECK=16
	      echo "Starting ${PROG}: ERROR (${STRAGE_DIR} NOT FOUND OR IS NOT DIRECTORY.)"
	    fi
    fi
    
    if [ ${CHECK} -eq 0 ]
    then
        # ロックファイル作成
        /bin/touch ${LOCK}
        
        # プロセス実行
        nohup ${PROCESS} ${LOCK} `cat ${PHP_MODULE}` ${PHP_PROCEDURE_PRO} ${LOG_DIR} ${INTERVAL} ${LOG_LEVEL} > /dev/null 2>&1 &
        
        # 3秒間のインターバル
        sleep 3
        
        # プロセス確認
        if [ `ps -ef | grep ${PHP_PROCEDURE_PRO} | grep -v grep | wc -l` -eq 0 ]
        then
            # メッセージ出力
            echo "Starting ${PROG}: [ NG ]"
            
            # 異常終了
            return 1
        else
            # メッセージ出力
            echo "Starting ${PROG}: [ OK ]"
            
            # 正常終了
            return 0
        fi
    fi
}
stop()
{
    # フラグ
    flag=0
    
    # ロックファイル存在確認
    if [ -f ${LOCK} ]
    then
        # ロックファイル削除
        /bin/rm -f ${LOCK}
        
        # プロセス終了確認ループ(約180sec)
        for i in `seq 1 1 180`
        do
            # プロセス確認
            if [ `ps -ef | grep ${PHP_PROCEDURE_PRO} | grep -v grep | wc -l` -eq 0 ]
            then
                flag=1
                break
            fi
            
            # 1秒間のインターバル
            sleep 1
        done
    fi
    
    #フラグ判定しメッセージ出力＆リターン
    if [ ${flag} -eq 1 ]
    then
        echo "Stopping ${PROG}: [ OK ]"
        return 0
    else
        echo "Stopping ${PROG}: [ NG ]"
        return 1
    fi
}

#----------------------------------------------------#
# 実処理
#----------------------------------------------------#
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo $"Usage: $0 {start|stop|restart}"
        exit 1
esac
